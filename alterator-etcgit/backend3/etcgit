#!/bin/sh

alterator_api_version=1
po_domain="alterator-etcgit"

. alterator-sh-functions
. shell-config

_cd_init() {
	cd "$1"
	[ -d .git ] || git init 1>/dev/null 2>&1
}

_get_branch_name() {
	git branch | sed -n -e 's/^\*[[:space:]]\+//p'
}

get_branch_name() {
	(
		_cd_init /etc
		_get_branch_name
	)
}

_get_branch_remote_url() {
	local br="$1"

	[ -z "$br" ] && br="$(_get_branch_name)"
	git config "branch.$br.remote"
}

get_branch_remote_url() {
        local br="${1-}"

        (
                _cd_init /etc
		_get_branch_remote_url "$br"
        )
}

list_local_branches() {
	(
		_cd_init /etc
		git branch | sed -e 's/^\*\?[[:space:]]\+//'
	)
}

list_remote_branches() {
	local url="${1-$in_url}"
	git ls-remote --heads "$url" | sed 's,^.*/,,'
}

_list_modified() {
	(
		_cd_init /etc
		git status -s -uno
	)
}

_list_K() {
        local rcd="$1"

        find "$rcd" -name 'K*' | \
        sed -e 's,^.*\(K[0-9]\+[^/]\+\)$,\1,' | \
	sort
}

_get_runlevel() {
        runlevel | sed -n 's/^.*\([0-9]\+\)$/\1/p'
}

_get_linked_srv() {
        local srv="$(readlink "$1")"

        echo "${srv##*/}"
}

_list_rS() {
        local rcd="$1"

        find "$rcd" -name 'S*' | \
        sed -e 's,^.*\(S[0-9]\+[^/]\+\)$,\1,' | \
	sort -r
}

_is_srv_blacklisted() {
	case "$1" in
		ahttpd|alteratord|plymouth|local)
			return 0
			;;
		*)
			return 1
			;;
	esac
}

list_kill_seq_for_srv() {
        local srvname="${1:-$in_service}"
        local runlevel="$(_get_runlevel)"
        [ -n "$runlevel" ] || runlevel=3
        local rcd="/etc/rc.d/rc$runlevel.d"
        [ -d "$rcd" ] || return 2

	local ksrvname=
        for f in `_list_rS "$rcd"`; do
		ksrvname="$(_get_linked_srv "$rcd/$f")"
		_is_srv_blacklisted "$ksrvname" && continue
                echo "$f"
                [ "$ksrvname" != "$srvname" ] || break
        done
}

_list_S() {
        local rcd="$1"

        find "$rcd" -name 'S*' | \
        sed -e 's,^.*\(S[0-9]\+[^/]\+\)$,\1,' | \
	sort
}

list_start_seq_for_srv() {
        local srvname="${1:-$in_service}"
        local runlevel="$(_get_runlevel)"
        [ -n "$runlevel" ] || runlevel=3
        local rcd="/etc/rc.d/rc$runlevel.d"
        [ -d "$rcd" ] || return 2
	local killseq="$(list_kill_seq_for_srv "$srvname" | _filter_SK)"
	[ -n "$killseq" ] || return 0

	local ssrvname=
        for f in `_list_S "$rcd"`; do
		ssrvname="$(_get_linked_srv "$rcd/$f")"
		echo $killseq | grep -qw "$ssrvname" || continue
		_is_srv_blacklisted "$ssrvname" && continue
                echo "$f"
        done
}

_get_service_names_for_files() {
        rpm -qfl "$@" | \
        sed -n -e '/^\/etc\/init.d\/functions$/ d' \
               -e '/^\/etc\/rc.d\/init.d\/functions$/ d' \
               -e '/^\/etc\/init.d\/[^\/]\+$/ s/^.*\///p' \
               -e '/^\/etc\/rc.d\/init.d\/[^\/]\+$/ s/^.*\///p' | \
        uniq
}

_filter_SK() {
        sed -e 's/^[SK][0-9]\+//'
}

list_modified() {
	_list_modified | \
	sed -e 's/^[[:space:]]*[^[:space:]]\+[[:space:]]\+//' \
	    -e 's,^.*$,/etc/&,'
}

list_kill_seq() {
	for s in $(_get_service_names_for_files $(list_modified)); do
                list_kill_seq_for_srv "$s"
        done | \
        sort -ru | \
        _filter_SK
}

list_start_seq() {
	for s in $(_get_service_names_for_files $(list_modified)); do
                list_start_seq_for_srv "$s"
        done | \
        sort -u | \
        _filter_SK
}

_duplicate() {
        sed -e 's/^.*$/&\t&/'
}

_format_status() {
	sed -e 's/^[[:space:]]*\([^[:space:]]\+\)[[:space:]]\+\(.*\)$/\2\t\1/'
}

_change_url() {
	local url="$1"
	local br="${2:-$(_get_branch_name)}"
	if [ -z "$br" ]; then
		hd="$(git ls-remote "$url" | sed -n -e '/[[:space:]]\+HEAD$/ {s/[[:space:]]\+HEAD$//p; q}')"
		if [ -n "$hd" ]; then
			br="$(git ls-remote --heads "$url" | sed -n -e "/^$hd[[:space:]]\\+/ {s,^.*[[:space:]]\\+refs/heads/,,p; q}")"
		else
			br="$(git ls-remote --heads "$url" | sed -e '1 {s,^.*[[:space:]]\+refs/heads/,,; q}')"
		fi
	fi
	if [ -n "$br" ]; then
		_reset_to "$url" "$br" || return $?
	fi
}

_reset_to() {
	local url="$1"
	local br="$2"
	local hd="$(git ls-remote --heads "$url" | sed -n -e "/[[:space:]]\\+refs\\/heads\\/$br\$/ {s/[[:space:]]\\+.*\$//p; q}")"
	if [ -n "$hd" ]; then
		git fetch "$url" "$br" 1>/dev/null 2>&1 || return 2
		git reset "$hd" 1>/dev/null 2>&1 || return 3
		git branch -M "$(_get_branch_name)" "$br" || return 4
	else
		return 1
	fi
	git config "branch.$br.remote" "$url"
}

change_url() {
	local url="${1-$in_url}"
	local br="${in_branch-}"

	(
		_cd_init /etc
		_change_url "$url" "$br"
	)
}

reset_to() {
	local br="${1-$in_branch}"
	[ -n "$br" ] || return 0
	local url=

	(
		_cd_init /etc
		url="$(_get_branch_remote_url)"
		[ -n "$url" ] || return 2
		_reset_to "$url" "$br" || return $?
	)
}

on_message()
{
	case "$in_action" in
		read)
			case "$in__objects" in
				/)
					write_string_param 'branch' "$(get_branch_name)"
					write_string_param 'url' "$(get_branch_remote_url)"
					;;
			esac
			;;
		write)
			case "$in__objects" in
				/)
					if [ "$in_url" ]; then
						change_url
					fi
					if [ "$in_branch" ]; then
						reset_to
					fi
					;;
			esac
			;;
		list)
			case "$in__objects" in
				branches)
					if [ -z "$in_url" ]; then
						list_local_branches | _duplicate | write_enum
					else
						list_remote_branches | _duplicate | write_enum
					fi
					;;
                                start)
                                        if [ -n "${in_service:-}" ]; then
                                                list_start_seq_for_srv | _filter_SK | _duplicate | write_enum
                                        else
                                                list_start_seq | _duplicate | write_enum
                                        fi
                                        ;;
                                stop)
                                        if [ -n "${in_service:-}" ]; then
                                                list_kill_seq_for_srv | _filter_SK | _duplicate | write_enum
                                        else
                                                list_kill_seq | _duplicate | write_enum
                                        fi
                                        ;;
				*)
					_list_modified | _format_status | write_enum
					;;
			esac
			;;
	esac
}

message_loop
