#!/bin/sh

alterator_api_version=1
po_domain="alterator-etcgit"

. alterator-sh-functions
. shell-config

_cd_init() {
	cd "$1"
	[ -d .git ] || git init 1>/dev/null 2>&1
}

_get_branch_name() {
	git branch | sed -n -e 's/^\*[[:space:]]\+//p'
}

get_branch_name() {
	(
		_cd_init /etc
		_get_branch_name
	)
}

_get_branch_remote_url() {
	local br="$1"

	[ -z "$br" ] && br="$(_get_branch_name)"
	git config "branch.$br.remote"
}

get_branch_remote_url() {
        local br="${1-}"

        (
                _cd_init /etc
		_get_branch_remote_url "$br"
        )
}

list_local_branches() {
	(
		_cd_init /etc
		git branch | sed -e 's/^\*\?[[:space:]]\+//'
	)
}

list_remote_branches() {
	local url="${1-$in_url}"
	git ls-remote --heads "$url" | sed 's,^.*/,,'
}

_list_modified() {
	(
		_cd_init /etc
		git status -s -uno
	)
}

_list_K() {
        local rcd="$1"

        find "$rcd" -name 'K*' | \
        sed -e 's,^.*\(K[0-9]\+[^/]\+\)$,\1,' | \
	sort
}

_get_runlevel() {
        runlevel | sed -n 's/^.*\([0-9]\+\)$/\1/p'
}

_get_linked_srv() {
        local srv="$(readlink "$1")"

        echo "${srv##*/}"
}

_list_rS() {
        local rcd="$1"

        find "$rcd" -name 'S*' | \
        sed -e 's,^.*\(S[0-9]\+[^/]\+\)$,\1,' | \
	sort -r
}

_is_srv_blacklisted() {
	case "$1" in
		ahttpd|alteratord|plymouth|local)
			return 0
			;;
		*)
			return 1
			;;
	esac
}

list_kill_seq_for_srv() {
        local srvname="${1:-$in_service}"
        local runlevel="$(_get_runlevel)"
        [ -n "$runlevel" ] || runlevel=3
        local rcd="/etc/rc.d/rc$runlevel.d"
        [ -d "$rcd" ] || return 2

	local ksrvname=
        for f in `_list_rS "$rcd"`; do
		ksrvname="$(_get_linked_srv "$rcd/$f")"
		_is_srv_blacklisted "$ksrvname" && continue
                echo "$f"
                [ "$ksrvname" != "$srvname" ] || break
        done
}

_list_S() {
        local rcd="$1"

        find "$rcd" -name 'S*' | \
        sed -e 's,^.*\(S[0-9]\+[^/]\+\)$,\1,' | \
	sort
}

list_start_seq_for_srv() {
        local srvname="${1:-$in_service}"
        local runlevel="$(_get_runlevel)"
        [ -n "$runlevel" ] || runlevel=3
        local rcd="/etc/rc.d/rc$runlevel.d"
        [ -d "$rcd" ] || return 2
	local killseq="${2:-$(list_kill_seq_for_srv "$srvname" | _filter_SK)}"
	[ -n "$killseq" ] || return 0

	local ssrvname=
        for f in `_list_S "$rcd"`; do
		ssrvname="$(_get_linked_srv "$rcd/$f")"
		echo $killseq | grep -qw "$ssrvname" || continue
		_is_srv_blacklisted "$ssrvname" && continue
                echo "$f"
        done
}

_get_service_names_for_files() {
	[ -n "$*" ] || return 0
        rpm -qfl "$@" | \
        sed -n -e '/^\/etc\/init.d\/functions$/ d' \
               -e '/^\/etc\/rc.d\/init.d\/functions$/ d' \
               -e '/^\/etc\/init.d\/[^\/]\+$/ s/^.*\///p' \
               -e '/^\/etc\/rc.d\/init.d\/[^\/]\+$/ s/^.*\///p' | \
        uniq
}

_filter_SK() {
        sed -e 's/^[SK][0-9]\+//'
}

list_modified() {
	_list_modified | \
	sed -e 's/^[[:space:]]*[^[:space:]]\+[[:space:]]\+//' \
	    -e 's,^.*$,/etc/&,'
}

list_kill_seq() {
	local srvs="${1-$(_get_service_names_for_files $(list_modified))}"

	for s in $srvs; do
                list_kill_seq_for_srv "$s"
        done | \
        sort -ru | \
        _filter_SK
}

list_start_seq() {
	local srvs="${1-$(_get_service_names_for_files $(list_modified))}"
	local killseq="${2-}"

	for s in $srvs; do
                list_start_seq_for_srv "$s" "$killseq"
        done | \
        sort -u | \
        _filter_SK
}

_duplicate() {
        sed -e 's/^.*$/&\t&/'
}

_format_status() {
	sed -e 's/^[[:space:]]*\([^[:space:]]\+\)[[:space:]]\+\(.*\)$/\2\t\1/'
}

_change_url() {
	local url="$1"
	local br="${2:-$(_get_branch_name)}"
	if [ -z "$br" ]; then
		hd="$(git ls-remote "$url" | sed -n -e '/[[:space:]]\+HEAD$/ {s/[[:space:]]\+HEAD$//p; q}')"
		if [ -n "$hd" ]; then
			br="$(git ls-remote --heads "$url" | sed -n -e "/^$hd[[:space:]]\\+/ {s,^.*[[:space:]]\\+refs/heads/,,p; q}")"
		else
			br="$(git ls-remote --heads "$url" | sed -e '1 {s,^.*[[:space:]]\+refs/heads/,,; q}')"
		fi
	fi
	if [ -n "$br" ]; then
		_reset_to "$url" "$br" || return $?
	fi
}

_reset_to() {
	local url="$1"
	local br="$2"
	local hd="$(git ls-remote --heads "$url" | sed -n -e "/[[:space:]]\\+refs\\/heads\\/$br\$/ {s/[[:space:]]\\+.*\$//p; q}")"
	if [ -n "$hd" ]; then
		git fetch "$url" "$br" 1>/dev/null 2>&1 || return 2
		git reset "$hd" 1>/dev/null 2>&1 || return 3
		git branch -M "$(_get_branch_name)" "$br" || return 4
	else
		return 1
	fi
	git config "branch.$br.remote" "$url"
}

change_url() {
	local url="${1-$in_url}"
	local br="${in_branch-}"

	(
		_cd_init /etc
		_change_url "$url" "$br"
	)
}

reset_to() {
	local br="${1-$in_branch}"
	[ -n "$br" ] || return 0
	local url=

	(
		_cd_init /etc
		url="$(_get_branch_remote_url)"
		[ -n "$url" ] || return 2
		_reset_to "$url" "$br" || return $?
	)
}

_list_commits() {
	local br="${1-$(get_branch_name)}"
	local limit="${2-}"

	git log ${limit:+-$limit} --pretty=oneline "$br"
}

list_commits() {
	local br="${1-${in_branch-$(get_branch_name)}}"
	local limit="${2-$in_limit}"

	(
		_cd_init /etc
		_list_commits "$br" "$limit"
	)
}

_checkout_head() {
	local hd="$1"
	local br="${2-$(get_branch_name)}"

	git reset --hard "$hd" 1>/dev/null 2>&1 || return 1
	git branch -M "$(_get_branch_name)" "$br" || return 2
}

checkout_head() {
	local hd="${1-$in_commit}"
	local br="${2-$(get_branch_name)}"

	(
		_cd_init /etc
		_checkout_head "$hd" "$br"
	)
}

reload_head() {
	local hd="${1-$in_commit}"
	[ -n "$hd" ] || hd='HEAD'
	local srvs="$(_get_service_names_for_files $(list_modified))"
	local killseq="$(list_kill_seq "$srvs")"
	local startseq="$(list_start_seq "$srvs" "$killseq")"
	local ret=0

	for s in $killseq; do
		if ! service "$s" stop 1>/dev/null 2>&1; then
			write_error_message "`_ 'Unable to stop service: %s'`" "$s"
			ret=1
			break
		fi
	done

	if [ $ret -eq 0 ]; then
		checkout_head "$hd" "$(get_branch_name)"
	fi

	for s in $startseq; do
		if ! service "$s" start 1>/dev/null 2>&1; then
			[ $ret -eq 0 ] && write_error_message "`_ 'Unable to start service: %s'`" "$s"
			ret=1
		fi
	done

	return $ret
}

_get_branch_head() {
	local br="${1-$(get_branch_name)}"

	_list_commits "$br" 1 | sed -e 's/^\([^[:space:]]\+\)[[:space:]]\+.*$/\1/'
}

get_branch_head() {
	local br="${1-${in_branch-$(get_branch_name)}}"

	(
		_cd_init /etc
		_get_branch_head "$br"
	)
}

_get_diff() {
	local file="${1-$in_file}"

	if [ -n "$file" ]; then
		git diff -- "$file"
	else
		git diff
	fi
}

get_diff() {
	local file="${1-$in_file}"

	(
		_cd_init /etc
		_get_diff "$file"
	)
}

write_error_message() {
	local msg="$(printf "$@")"
	write_error "$msg"
}

on_message()
{
	case "$in_action" in
		read)
			case "$in__objects" in
				/)
					write_string_param 'branch' "$(get_branch_name)"
					write_string_param 'url' "$(get_branch_remote_url)"
					;;
				head)
					write_string_param 'commit' "$(get_branch_head)"
					;;
				diff)
					write_string_param 'diff' "$(get_diff)"
					;;
			esac
			;;
		write)
			case "$in__objects" in
				/)
					if [ "$in_url" ]; then
						change_url
					fi
					if [ "$in_branch" ]; then
						reset_to
					fi
					;;
				head)
					reload_head
					;;
			esac
			;;
		list)
			case "$in__objects" in
				branches)
					if [ -z "$in_url" ]; then
						list_local_branches | _duplicate | write_enum
					else
						list_remote_branches | _duplicate | write_enum
					fi
					;;
				commits)
					list_commits | write_enum
					;;
                                start)
                                        if [ -n "${in_service:-}" ]; then
                                                list_start_seq_for_srv | _filter_SK | _duplicate | write_enum
                                        else
                                                list_start_seq | _duplicate | write_enum
                                        fi
                                        ;;
                                stop)
                                        if [ -n "${in_service:-}" ]; then
                                                list_kill_seq_for_srv | _filter_SK | _duplicate | write_enum
                                        else
                                                list_kill_seq | _duplicate | write_enum
                                        fi
                                        ;;
				/)
					_list_modified | _format_status | write_enum
					;;
			esac
			;;
	esac
}

message_loop
